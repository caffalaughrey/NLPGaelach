from .utils import s_ipa_fn

POSSIBLE_CONSONANTS = [
    'ght',
    'tçh',
    'sth',
    'bb',
    'cc',
    'ch',
    'çh',
    'ck',
    'dd',
    'dh',
    'dj',
    'gg',
    'gh',
    'lh',
    'll',
    'mm',
    'ng',
    'nn',
    'pp',
    'qu',
    'rr',
    'sh',
    'ss',
    'st',
    'th',
    'tt',
    'b',
    'c',
    'd',
    'f',
    'g',
    'h',
    'j',
    'k',
    'l',
    'm',
    'n',
    'p',
    'r',
    's',
    't',
    'v',
    'w'
]
POSSIBLE_VOWELS = [
    'eeai',
    'eoie',
    'iauy',
    'ieau',
    'iooa',
    'oauy',
    'ooie',
    'aai',
    'aew',
    'aiy',
    'aue',
    'eai',
    'eau',
    'eay',
    'eea',
    'eei',
    'eey',
    'eih',
    'eiy',
    'eoi',
    'ieu',
    'ioo',
    'oie',
    'ooa',
    'ooi',
    'ooh',
    'ooy',
    'aa',
    'ae',
    'ah',
    'ai',
    'au',
    'ay',
    'ea',
    'ee',
    'eh',
    'ei',
    'eu',
    'ey',
    'ia',
    'ie',
    'io',
    'iu',
    'oa',
    'oh',
    'oi',
    'oo',
    'oy',
    'ua',
    'ue',
    'ui',
    'uy',
    'ya',
    'wa',
    'a',
    'e',
    'i',
    'o',
    'u',
    'y'
]
ALL_POSSIBLE_GRAPHS = POSSIBLE_CONSONANTS + POSSIBLE_VOWELS

ALL_POSSIBLE_GRAPHS.sort(reverse=True, key=lambda g: len(g))

ORD_VOWELS = {
    'a': lambda a: 'a' if a.is_stressed else 'ə',
    'aa': 'ɛː',
    'aai': 'ɛi',
    'ae': 'i',
    'aew': 'au',
    'ah': 'ə',
    'ai': 'a',
    'aiy': 'eː',
    'aue': 'eːw',
    'ay': 'eː',
    'e': lambda e: 'e' if e.is_stressed else 'ə',
    'ea': 'ɛː',
    'eh': 'eː',
    'eai': 'eː',
    'eau': 'uː',
    'ieau': 'uː',
    'eay': 'eː',
    'eea': 'iːə',
    'eei': 'iː',
    'eey': 'iː',
    'eiy': 'eː',
    'ee': 'iː',
    'eeai': 'iːai',
    'ei': 'eː',
    'eih': 'ɛː',
    'eoi': 'ai',
    'eoie': 'øi',
    'eu': 'uː',
    'ieu': 'eu',
    'ey': lambda ey: 'eː' if ey.is_stressed else 'ə',
    'i': lambda i: 'i' if i.is_stressed else 'ə',
    'ia': lambda ia: 'iːə' if ia.is_stressed else 'a',
    'ie': 'aɪ',
    'io': 'iɔ',
    'o': 'ɔ',
    'oa': 'ɔː',
    'oh': 'ɔ',
    'oi': 'ɔ',
    'oie': 'iː',
    'oo': 'uː',
    'ioo': 'uː',
    'ooh': 'uː',
    'ooa': 'uːə',
    'oauy': 'awə',
    'iooa': 'uː',
    'iauy': 'iːawə',
    'ooi': 'uiː',
    'ooie': 'uiː',
    'ooy': 'uː',
    'oy': 'ɔ',
    'u': 'o',
    'ua': 'uːa',
    'ue': 'u',
    'ui': 'u',
    'uy': 'ɛi',
    'wa': 'o',
    'ya': 'aiə',
    'y': lambda y: 'i' if y.is_stressed else 'ə'
}
FINAL_E_VOWELS = {
    'a': 'ɛː',
    'ia': 'eː',
    'aa': 'ɛː',
    'ai': 'aː',
    'io': 'oː',
    'o': 'ɔː'
}
SLENDER_CONSONANTS = {
    'ght': 'x',
    'tçh': 'tʃ',
    'bb': lambda bb: 'v' if bb.is_between_vowels() else 'bʲ',
    'cc': lambda cc: 'g' if cc.is_between_vowels() else 'kʲ',
    'ch': 'xʲ',
    'ck': lambda ck: 'g' if ck.is_between_vowels() else 'kʲ',
    'çh': 'tʃ',
    'dj': lambda dj: 'ʒ' if dj.is_between_vowels() else 'dʒ',
    'gg': lambda gg: 'ɣ' if gg.is_between_vowels() else 'ɡʲ',
    'gh': lambda gh: 'x' if gh.is_final_sound() else 'ɣ',
    'lh': 'lʲ',
    'ng': 'ŋ',
    'pp': lambda pp: 'v' if pp.is_between_vowels() else 'pʲ',
    'rr': lambda rr: 'ɹ̝' if rr.is_final_sound() else 'r',
    'sh': 'ʃ',
    'ss': s_ipa_fn,
    'tt': 'tʃ',
    'b': lambda b: 'v' if b.is_between_vowels() else 'bʲ',
    'c': lambda c: 'g' if c.is_between_vowels() else 'kʲ',
    'd': lambda d: 'd' if d.next is not None and d.next.is_consonant() else 'dʒ',
    'f': 'fʲ',
    'g': lambda g: 'ɣ' if g.is_between_vowels() else 'ɡʲ',
    'h': 'h',
    'j': lambda j: 'ʒ' if j.is_between_vowels() else 'dʒ',
    'k': 'kʲ',
    'l': 'lʲ',
    'm': lambda m: 'm' if m.next is not None and m.next.is_consonant() else 'mʲ',
    'n': lambda n: 'n' if n.next is not None and n.next.is_consonant() else 'nʲ',
    'p': lambda p: 'v' if p.is_between_vowels() else 'pʲ',
    'r': lambda r: 'ɹ̝' if r.is_final_sound() else 'r',
    's': s_ipa_fn,
    't': lambda t: 'dʒ' if t.is_between_vowels() else 'tʃ',
    'v': 'v'
}
BROAD_CONSONANTS = {
    'ght': 'x',
    'sth': 'st',
    'bb': lambda bb: 'v' if bb.is_between_vowels() else 'b',
    'cc': lambda cc: 'g' if cc.is_between_vowels() else 'k',
    'ch': 'x',
    'ck': lambda ck: 'g' if ck.is_between_vowels() else 'k',
    'dd': lambda dd: 'ð' if dd.is_between_vowels() else 'd',
    'dh': lambda dh: 'ð' if dh.is_between_vowels() else 'd',
    'gh': lambda gh: 'x' if gh.is_final_sound() else 'ɣ',
    'gg': lambda gg: 'ɣ' if gg.is_between_vowels() else 'ɡ',
    'll': 'l',
    'lh': 'lʲ',
    'mm': 'm',
    'ng': 'ŋ',
    'nn': 'n',
    'pp': lambda pp: 'v' if pp.is_between_vowels() else 'p',
    'rr': lambda rr: 'ɹ̝' if rr.is_final_sound() else 'r',
    'qu': 'kw',
    'ss': s_ipa_fn,
    'st': 's',
    'th': 't',
    'tt': lambda tt: 'd' if tt.is_between_vowels() else 't',
    'b': lambda b: 'v' if b.is_between_vowels() else 'b',
    'c': 'k',
    'd': lambda d: 'ð' if d.is_between_vowels() else 'd',
    'f': 'f',
    'g': lambda g: 'ɣ' if g.is_between_vowels() else 'ɡ',
    'k': 'k',
    'l': 'l',
    'm': 'm',
    'n': 'n',
    'p': lambda p: 'v' if p.is_between_vowels() else 'p',
    'r': lambda r: 'ɹ̝' if r.is_final_sound() else 'r',
    's': s_ipa_fn,
    't': 't',
    'v': 'v',
    'w': 'w'
}

UNIQUE_BROAD_CONSONANTS = [key for key in BROAD_CONSONANTS if key not in SLENDER_CONSONANTS]
UNIQUE_SLENDER_CONSONANTS = [key for key in SLENDER_CONSONANTS if key not in BROAD_CONSONANTS]
